#!groovy
import hudson.model.Result
import groovy.json.*

def AGENT_LABEL  = null
// jenkins_agent = null
// pkuda = "hostname"

// Code show all Jenkins Agents

import jenkins.model.*
collectBuildEnv = [:]
@NonCPS

// def jenkins = Jenkins.instance
// def computers = jenkins.computers
// computers.each {
//   println "${it.displayName} ${it.hostName}"
//  }

// def labels = jenkins.getLabels()
// labels.each {
//   println "${it.displayName}"
// }


def getNodes(String label) {
    echo "running  getNodes"
    jenkins.model.Jenkins.instance.nodes.collect { thisAgent ->
        if (thisAgent.labelString.contains("${label}")) {
        // this works too
        // if (thisAagent.labelString == "${label}") {
            return thisAgent.name
        }
    }
}
def dumpBuildEnv(String agentName) {
    echo "running dumpBuildEnv"
    node("${agentName}") {
        stage("Env in ${agentName}") {
            echo "running on agent, ${agentName}"
            sh 'printenv'
        }
    }
}
def processTask() {
    // Replace label-string with the label name that you may have
    // def nodeList = getNodes("label-string")
    def nodeList = getNodes("yehuda")
    echo "running processTask"

 
    for(i=0; i<nodeList.size(); i++) {
        def agentName = nodeList[i]
        println "Prearing task for " + agentName
        
        // skip the null entries in the nodeList
        if (agentName != null) {
            println "Prearing task for " + agentName
            collectBuildEnv["node_" + agentName] = {
                dumpBuildEnv(agentName)
            }
        }
    }
}


pipeline 
  {
                                      
   parameters
    {
        choice (choices: ['LINUX','WIN'], name: 'ENV' , description: '')
        choice (choices: ['yehuda-hyperv-linux06-jenkins-agent'], name: 'jenkins_agent' , description: '')
        string(description: '', name: 'pkuda')
        string(description: '', name: 'tagName')
    }

    //options
    //{
    //    checkoutTosubirectory('${BUILD_ID}_${JOB_BASE_NAME}_${BUILD_TIMESTAMP}')
    //    timestamps()
    //}
   
   environment 
    {
      PIPELINE_TYPE          = ""
      GIT_AUTH_ID            = "0a606b8a-7133-4378-9386-59de6bab1742"
      jenkins_agent          = "${params.jenkins_agent}"
      pkuda                  = "${params.pkuda}"
      tagName                = "${params.tagName}"
      ENV                    = "${params.ENV}"
    }


 // agent {label "${params.jenkins_agent}"}
 agent any
 // agent {label "${params.tagName}"}
   
  stages 
   {
 
    stage('agents-tasks')
     {
            
        steps {
            script {
                processTask()
      
                parallel collectBuildEnv
            }
        }
     }
    stage('Initialize variables') 
     {
        steps {   
            script {
                deleteDir()
                checkout scm
                echo "pkuda  :  ${pkuda}"  
                echo "ENV    :  ${ENV}"
                echo "tgName :  ${tagName}"  
            }
        }
     }
   
   // end of  stage
   
    stage('LINUX') 
     {
      when {
          expression { return ENV == 'LINUX' }
           }
      steps
       {
        script
         {
          
           // https://stackoverflow.com/questions/22917491/reading-file-from-workspace-in-jenkins-with-groovy-script
           // https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/
 
  
           env.WORKSPACE = pwd()
           echo "Showing Jenkins WORKSPACE Via Pipeline : ${env.WORKSPACE}"
           // def filePath = readFile "${env.WORKSPACE}/run_nmon/run_nmon_final.conf"
           // println(filePath)
           // def lines = filePath.readLines() 
           // for (line in lines) {                                            
           //    echo "Showing line : $line"
           //                    }
    
            def statusCode = sh  encoding: 'UTF-8', returnStatus: true, script: 
               """
                #!/bin/bash
           
                echo  "Showing HOSTNAME : " \$HOSTNAME
		echo  "ENV  : " \$ENV
                taric=`date +%Y%m%d%H%M`
                echo  "taric : " \$taric
                echo  "Showing pkuda : " \$pkuda
                \$pkuda
                
                jenkins_workspace=`pwd`
                echo  "Showing jenkins_workspace via shell : " \$jenkins_workspace
                ls -la
                
                # #############################
                # Backup jenkins workspace
                # ############################
                Target_Folder=/tmp/yehuda
                mkdir -p \$Target_Folder
                rm -rf \$Target_Folder
                mkdir -p \$Target_Folder
                cp -Rp \$jenkins_workspace* \$Target_Folder
                echo  "Showing jenkins_workspace"
                ls -la \$jenkins_workspace
                echo  "Showing Target_Folder"
                ls -la \$Target_Folder
 
                """ 
         }
       }
     }

    // end of  stage
    
    stage('WIN') 
     {
       when {
             expression { return ENV == 'WIN' }
            }
      steps
       {
        script
         {
          
           // https://stackoverflow.com/questions/22917491/reading-file-from-workspace-in-jenkins-with-groovy-script
           // https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/
          
           env.WORKSPACE = pwd()
           echo "Showing Jenkins WORKSPACE Via Pipeline : ${env.WORKSPACE}"
           // def filePath = readFile "${env.WORKSPACE}/run_nmon/run_nmon_final.conf"
           // println(filePath)
           // def lines = filePath.readLines() 
           // for (line in lines) {                                            
           //    echo "Showing line : $line"
           //                    }
    
            def statusCode = powershell encoding: 'UTF-8', returnStatus: true, script:
                """
  
                echo  "Showing pkuda : " $pkuda
                $pkuda
            
  				# #############################
                # Backup jenkins workspace
                # ############################
                \$jenkins_workspace= "\$PWD" 
                echo  'Showing jenkins_workspace via shell : ' "\$jenkins_workspace"  
                echo  "Going to Backup  jenkins_workspace "
                \$Target_Folder = 'D:\\yehuda\\Backup\\Jenkins'

				if (Test-Path -Path \$Target_Folder)
                {
  				  "Path exists!"
                  rm  -r -fo \$Target_Folder
				} 
                else 
                {
 				   "Path doesn't exist."
				}
                mkdir \$Target_Folder
                xcopy "\$jenkins_workspace"   \$Target_Folder /S /E /Y
      
                """ 

         }
       }
     }
 
 // end of  stage
 
 }    
 
 // end of  stages

 }
